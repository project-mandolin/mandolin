mandolin {
   data = ${?PWD}
   mode = "model-selection"

   mmlp {
      train-file        = ${mandolin.data}/weburl.train
      test-file         = ${mandolin.data}/weburl.test
      label-file        = ${mandolin.data}/url.labels  
      num-epochs	= 10
      progress-file	= ${?PWD}/url.train.progress
      synchronous	= false
      threads		= 16
      ensure-sparse	= true

      optimizer {
         method	               = adagrad
	 initial-learning-rate = 1.0
      }

      specification = [
         {"ltype":"InputSparse"},
 	 {"ltype":"SoftMax"}
      ] 
   }
   
   model-selection {
      acquisition-function = "random"
      concurrent-evaluations = 16 ## number of model evaluators (threads or Spark jobs)
      threads-per-worker = 1 
      worker-batch-size = 1  ## whether to evaluate mulitple models on separate threads within a worker/job
      score-sample-size = 320 
      update-frequency = 10   ## how often to update scoring function
      total-evals = 160       ## how many total models to evaluate before finishing model selection
      categorical = [{"name": "mandolin.trainer.optimizer.method", "values": ["adagrad", "sgd", "rmsprop"]}]
      real        = [{"name": "mandolin.trainer.optimizer.initial-learning-rate", "range": [0.001,0.1]}]
      int         = []
   }
}