mandolin {
    data     = ${?PWD}
    mode     = "train-test"
    driver   = mmlp
        
    mmlp {
        dense-vector-size      = 784
        train-file             = ${mandolin.data}/mnist.10k
        label-file             = ${mandolin.data}/mnist.labels
        test-file              = ${mandolin.data}/mnist.t
        eval-freq              = 1
        model-file             = ${mandolin.data}/model
        num-epochs             = 20
        progress-file          = ${mandolin.data}/mnist.train.progress
        threads                = 8

        optimizer {
            method                = adagrad
            initial-learning-rate = 0.1
        }
        specification = [
            {"ltype":"Input"},
            {"ltype":"SoftMax"} ]
    }

    model-selection {
       use-hyperband = "false"
       acquisition-function = "ucb"
       acq-mix-param = 0.0
       concurrent-evaluations = 1      ## number of model evaluators (threads or Spark jobs)
       threads-per-worker = 1 
       worker-batch-size = 1  ## whether to evaluate mulitple models on separate threads within a worker/job
       score-sample-size = 240 ## number of 
       update-frequency = 4   ## how often to update scoring function
       total-evals = 12       ## how many total models to evaluate before finishing model selection
       categorical = [{"name": "mandolin.mmlp.optimizer.method", "values": ["adagrad", "rmsprop"]}]
       real        = [{"name": "mandolin.mmlp.optimizer.initial-learning-rate", "range":[0.01, 0.9]}]
       int         = []       
    }

}

