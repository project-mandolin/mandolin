## Example using mnist but with model selection over one categorical
## hyperparameter (optimizer type) and a real-valued one
mandolin {
    data     = ${?PWD}
    mode     = "train"
    driver   = xg

    tr-file  = ${mandolin.data}/train.vecs
    lb-file  = ${mandolin.data}/splice.labels
    tst-file = ${mandolin.data}/train.vecs

    mmlp {
        train-file             = ${mandolin.tr-file}
        label-file             = ${mandolin.lb-file}
        test-file              = ${mandolin.tst-file}
        model-file             = ${mandolin.data}/xg.model
        num-epochs             = 100
        progress-file          = ${mandolin.data}/mnist.train.progress
        threads                = 8

    }

    xg {
        objective              = "binary:logistic"
        train-file             = ${mandolin.tr-file}
        label-file             = ${mandolin.lb-file}
        test-file              = null # ${mandolin.tst-file}

       max-depth = 3
       gamma = 1.0
       rounds = 20
    }

    model-selection {
       use-hyperband = "false"
       acquisition-function = "ucb"
       acq-mix-param = 1.0
       concurrent-evaluations = 6      ## number of model evaluators (threads or Spark jobs)
       threads-per-worker = 1 
       worker-batch-size = 1  ## whether to evaluate mulitple models on separate threads within a worker/job
       score-sample-size = 240 ## number of 
       update-frequency = 5   ## how often to update scoring function
       total-evals = 128       ## how many total models to evaluate before finishing model selection
       categorical = []
       real        = [{"name": "mandolin.xg.gamma", "range": [0.1,1.0]}]
       int         = [{"name": "mandolin.xg.max-depth", "range": [3,6]},
                      {"name": "mandolin.xg.rounds", "range":[2,40]}] 
    }
    

}